// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User Management & Authentication
model User {
  id                String   @id @default(cuid())
  email             String   @unique
  emailVerified     DateTime?
  name              String?
  image             String?
  password          String?
  role              UserRole @default(PATIENT)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  // Profile Information
  profile           UserProfile?
  
  // Medical Records
  documents         Document[]
  sharedDocuments   DocumentShare[]
  
  // Audit & Activity
  activities        Activity[]
  sessions          Session[]
  accounts          Account[]
  
  // Medical Relationships
  patientDoctors    PatientDoctor[] @relation("Patient")
  doctorPatients    PatientDoctor[] @relation("Doctor")
  
  // Notifications
  notifications     Notification[]
  
  @@map("users")
}

model UserProfile {
  id              String    @id @default(cuid())
  userId          String    @unique
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Personal Information
  firstName       String?
  lastName        String?
  dateOfBirth     DateTime?
  gender          Gender?
  phone           String?
  address         String?
  city            String?
  state           String?
  zipCode         String?
  country         String?
  
  // Medical Information (for patients)
  bloodType       String?
  allergies       String[]
  medications     String[]
  medicalHistory  String?
  emergencyContact String?
  insuranceInfo   Json?
  
  // Professional Information (for doctors)
  licenseNumber   String?
  specialization  String?
  hospital        String?
  department      String?
  
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  @@map("user_profiles")
}

// Document Management
model Document {
  id                String       @id @default(cuid())
  userId            String
  user              User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Basic Information
  name              String
  originalFileName  String
  fileType          String
  fileSize          Int
  mimeType          String
  
  // Storage Information
  storageUrl        String
  thumbnailUrl      String?
  
  // Classification
  category          DocumentCategory
  subCategory       String?
  
  // Medical Information
  doctorName        String?
  hospitalName      String?
  visitDate         DateTime?
  
  // AI Analysis
  summary           String?
  extractedText     String?
  aiAnalysis        Json?
  tags              String[]
  
  // Metadata
  isEncrypted       Boolean      @default(false)
  isShared          Boolean      @default(false)
  isFavorite        Boolean      @default(false)
  isArchived        Boolean      @default(false)
  
  // Timestamps
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt
  
  // Relations
  shares            DocumentShare[]
  activities        Activity[]
  
  @@map("documents")
}

model DocumentShare {
  id           String      @id @default(cuid())
  documentId   String
  document     Document    @relation(fields: [documentId], references: [id], onDelete: Cascade)
  sharedWithId String
  sharedWith   User        @relation(fields: [sharedWithId], references: [id], onDelete: Cascade)
  sharedById   String
  
  // Permissions
  canView      Boolean     @default(true)
  canDownload  Boolean     @default(false)
  canEdit      Boolean     @default(false)
  
  // Expiration
  expiresAt    DateTime?
  
  // Timestamps
  createdAt    DateTime    @default(now())
  
  @@unique([documentId, sharedWithId])
  @@map("document_shares")
}

// Medical Relationships
model PatientDoctor {
  id        String   @id @default(cuid())
  patientId String
  patient   User     @relation("Patient", fields: [patientId], references: [id], onDelete: Cascade)
  doctorId  String
  doctor    User     @relation("Doctor", fields: [doctorId], references: [id], onDelete: Cascade)
  
  // Relationship Details
  status    RelationshipStatus @default(ACTIVE)
  notes     String?
  
  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@unique([patientId, doctorId])
  @@map("patient_doctors")
}

// Activity & Audit Trail
model Activity {
  id         String       @id @default(cuid())
  userId     String
  user       User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  documentId String?
  document   Document?    @relation(fields: [documentId], references: [id], onDelete: SetNull)
  
  // Activity Details
  action     ActivityType
  details    Json?
  ipAddress  String?
  userAgent  String?
  
  // Timestamps
  createdAt  DateTime     @default(now())
  
  @@map("activities")
}

// Notifications
model Notification {
  id        String           @id @default(cuid())
  userId    String
  user      User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Notification Details
  type      NotificationType
  title     String
  message   String
  data      Json?
  
  // Status
  isRead    Boolean          @default(false)
  
  // Timestamps
  createdAt DateTime         @default(now())
  
  @@map("notifications")
}

// Authentication Models (NextAuth.js)
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

// Enums
enum UserRole {
  PATIENT
  DOCTOR
  NURSE
  ADMIN
  HOSPITAL_ADMIN
}

enum Gender {
  MALE
  FEMALE
  OTHER
  PREFER_NOT_TO_SAY
}

enum DocumentCategory {
  PRESCRIPTION
  LAB_REPORT
  TEST_REPORT
  MEDICAL_BILL
  INSURANCE_DOCUMENT
  VACCINATION_RECORD
  MEDICAL_IMAGE
  DISCHARGE_SUMMARY
  CONSULTATION_NOTE
  REFERRAL
  OTHER
}

enum RelationshipStatus {
  ACTIVE
  INACTIVE
  PENDING
  BLOCKED
}

enum ActivityType {
  DOCUMENT_UPLOADED
  DOCUMENT_VIEWED
  DOCUMENT_SHARED
  DOCUMENT_DOWNLOADED
  DOCUMENT_DELETED
  USER_LOGIN
  USER_LOGOUT
  PROFILE_UPDATED
  SETTINGS_CHANGED
  DOCTOR_RELATIONSHIP_CREATED
  DOCTOR_RELATIONSHIP_REMOVED
}

enum NotificationType {
  DOCUMENT_SHARED
  DOCUMENT_REMINDER
  APPOINTMENT_REMINDER
  SYSTEM_UPDATE
  SECURITY_ALERT
  DOCTOR_MESSAGE
} 