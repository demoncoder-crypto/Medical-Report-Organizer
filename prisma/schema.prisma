// Medical Database Schema for Production
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

// User Management
model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  role      UserRole @default(PATIENT)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  patientProfile PatientProfile?
  doctorProfile  DoctorProfile?
  documents      Document[]
  sharedDocuments DocumentShare[]
  activities     Activity[]

  @@map("users")
}

enum UserRole {
  PATIENT
  DOCTOR
  NURSE
  ADMIN
  HOSPITAL_ADMIN
}

// Patient Profile
model PatientProfile {
  id            String    @id @default(cuid())
  userId        String    @unique
  mrn           String?   @unique // Medical Record Number
  dateOfBirth   DateTime?
  gender        Gender?
  phoneNumber   String?
  address       String?
  emergencyContact String?
  insurance     String?
  
  // Medical Information
  bloodType     String?
  allergies     String[]
  conditions    String[]
  familyHistory String[]
  
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  vitals        VitalSigns[]
  labResults    LabResult[]
  medications   Medication[]
  appointments  Appointment[]

  @@map("patient_profiles")
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

// Doctor Profile
model DoctorProfile {
  id            String   @id @default(cuid())
  userId        String   @unique
  licenseNumber String?  @unique
  specialty     String?
  hospital      String?
  department    String?
  
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  appointments  Appointment[]
  prescriptions Medication[]

  @@map("doctor_profiles")
}

// Document Management
model Document {
  id          String       @id @default(cuid())
  userId      String
  name        String
  type        DocumentType
  content     String       @db.Text
  summary     String?      @db.Text
  
  // Metadata
  doctor      String?
  hospital    String?
  date        DateTime?
  tags        String[]
  
  // File Information
  originalName String?
  mimeType     String?
  fileSize     Int?
  
  // AI Processing
  processed   Boolean      @default(false)
  confidence  Float?
  
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  // Relations
  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  shares      DocumentShare[]
  activities  Activity[]

  @@map("documents")
}

enum DocumentType {
  PRESCRIPTION
  LAB_RESULT
  IMAGING_REPORT
  DISCHARGE_SUMMARY
  CONSULTATION_NOTE
  VACCINATION_RECORD
  INSURANCE_CLAIM
  MEDICAL_BILL
  REFERRAL_LETTER
  OPERATIVE_REPORT
  PATHOLOGY_REPORT
  OTHER
}

// Document Sharing
model DocumentShare {
  id         String   @id @default(cuid())
  documentId String
  userId     String   // Who it's shared with
  sharedBy   String   // Who shared it
  permission Permission @default(READ)
  expiresAt  DateTime?
  
  createdAt  DateTime @default(now())

  // Relations
  document   Document @relation(fields: [documentId], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([documentId, userId])
  @@map("document_shares")
}

enum Permission {
  READ
  WRITE
  ADMIN
}

// Medical Data Models
model VitalSigns {
  id        String   @id @default(cuid())
  patientId String
  
  // Measurements
  systolic    Int?
  diastolic   Int?
  heartRate   Int?
  temperature Float?
  weight      Float?
  height      Float?
  bmi         Float?
  oxygenSat   Int?
  
  // Metadata
  measuredAt  DateTime @default(now())
  measuredBy  String?
  notes       String?
  
  createdAt   DateTime @default(now())

  // Relations
  patient     PatientProfile @relation(fields: [patientId], references: [id], onDelete: Cascade)

  @@map("vital_signs")
}

model LabResult {
  id          String   @id @default(cuid())
  patientId   String
  
  // Lab Information
  testName    String
  value       String
  unit        String?
  referenceRange String?
  status      LabStatus @default(NORMAL)
  
  // Metadata
  orderedBy   String?
  labName     String?
  collectedAt DateTime?
  reportedAt  DateTime @default(now())
  
  createdAt   DateTime @default(now())

  // Relations
  patient     PatientProfile @relation(fields: [patientId], references: [id], onDelete: Cascade)

  @@map("lab_results")
}

enum LabStatus {
  NORMAL
  ABNORMAL
  CRITICAL
  PENDING
}

model Medication {
  id            String   @id @default(cuid())
  patientId     String
  prescribedBy  String?
  
  // Medication Information
  name          String
  genericName   String?
  dosage        String
  frequency     String
  route         String?   // oral, IV, etc.
  indication    String?
  
  // Dates
  prescribedAt  DateTime @default(now())
  startDate     DateTime?
  endDate       DateTime?
  
  // Status
  status        MedicationStatus @default(ACTIVE)
  notes         String?
  
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  patient       PatientProfile @relation(fields: [patientId], references: [id], onDelete: Cascade)
  doctor        DoctorProfile? @relation(fields: [prescribedBy], references: [id])

  @@map("medications")
}

enum MedicationStatus {
  ACTIVE
  DISCONTINUED
  COMPLETED
  ON_HOLD
}

model Appointment {
  id          String   @id @default(cuid())
  patientId   String
  doctorId    String?
  
  // Appointment Details
  title       String
  description String?
  scheduledAt DateTime
  duration    Int?      // minutes
  status      AppointmentStatus @default(SCHEDULED)
  
  // Location
  location    String?
  isVirtual   Boolean   @default(false)
  
  // Notes
  notes       String?
  diagnosis   String[]
  
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  patient     PatientProfile @relation(fields: [patientId], references: [id], onDelete: Cascade)
  doctor      DoctorProfile? @relation(fields: [doctorId], references: [id])

  @@map("appointments")
}

enum AppointmentStatus {
  SCHEDULED
  CONFIRMED
  IN_PROGRESS
  COMPLETED
  CANCELLED
  NO_SHOW
}

// Activity Logging (for audit trail)
model Activity {
  id          String       @id @default(cuid())
  userId      String
  documentId  String?
  
  action      ActivityType
  description String
  metadata    Json?
  
  createdAt   DateTime     @default(now())

  // Relations
  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  document    Document?    @relation(fields: [documentId], references: [id], onDelete: Cascade)

  @@map("activities")
}

enum ActivityType {
  DOCUMENT_UPLOADED
  DOCUMENT_VIEWED
  DOCUMENT_SHARED
  DOCUMENT_DELETED
  PROFILE_UPDATED
  APPOINTMENT_SCHEDULED
  MEDICATION_ADDED
  LAB_RESULT_ADDED
  LOGIN
  LOGOUT
}

// Clinical Decision Support
model DrugInteraction {
  id            String @id @default(cuid())
  drug1         String
  drug2         String
  severity      InteractionSeverity
  description   String @db.Text
  mechanism     String?
  management    String @db.Text
  sources       String[]
  
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@unique([drug1, drug2])
  @@map("drug_interactions")
}

enum InteractionSeverity {
  MILD
  MODERATE
  SEVERE
  CONTRAINDICATED
}

model ClinicalGuideline {
  id            String @id @default(cuid())
  condition     String
  organization  String
  title         String
  description   String @db.Text
  recommendations Json
  evidenceLevel EvidenceLevel
  lastUpdated   DateTime
  
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@map("clinical_guidelines")
}

enum EvidenceLevel {
  A
  B
  C
  D
}

// Notifications
model Notification {
  id        String   @id @default(cuid())
  userId    String
  title     String
  message   String   @db.Text
  type      NotificationType
  read      Boolean  @default(false)
  
  createdAt DateTime @default(now())

  @@map("notifications")
}

enum NotificationType {
  APPOINTMENT_REMINDER
  LAB_RESULT_AVAILABLE
  MEDICATION_REMINDER
  DOCUMENT_SHARED
  SYSTEM_ALERT
} 